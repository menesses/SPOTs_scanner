function reg_points = jogapplet(VideoInput,SerialPort)
% Launches jog applet.
% Displays a user interface figure populated with the following panels and
% components:
%   - Video Panel (vidpnl): holds video start and stop buttons
%   - Registration Panel (regpnl): holds point registration buttons and
%         displays for registered points. Also holds submit points button.
%   - Jog Panel (jogpnl): holds directional jog buttons and movement
%         increment selection.
%   - Alarm Panel (alarmpnl): holds alarm indicator and button to reset/unlock
%         the controller following an alarm.

    % Open figure
    fig = uifigure('Name','Registration Preview','Position',[100 100 1260 700]);
    
	% Create axes that will house the video preview
	ax = uiaxes(fig,'Position',[10 10 960 687],...
        'Visible','off');
    
	% Setup global temp_points variable to be updated with registration buttons.
    global temp_points
    temp_points = zeros(3,2)*NaN;
    
	% Change video source parameters to fit video
    set(VideoInput.Source,'DecimationHorizontal',4)
    set(VideoInput.Source,'DecimationVertical',4)
	% Empty image object to be filled by video later
    im = image(ax,zeros([687, 960],'uint8'));
    
	% Create panel for video buttons
    vidpnl = uipanel(fig,'Position',[1000 600 200 100]);
	% Direct video preview to previous image object on button click.
    vidstart = uibutton(vidpnl,...
        'ButtonPushedFcn',@(vidstart,event) preview(VideoInput,im),...
        'Position',[10 10 85 80],...
        'FontSize',16,...
        'Text',{'Start','Video'},...
        'HorizontalAlignment','center');
	% Close existing video preview on button click.
    vidstop = uibutton(vidpnl,...
        'ButtonPushedFcn',@(vidstop,event) closepreview(VideoInput),...
        'Position',[105 10 85 80],...
        'FontSize',16,...
        'Text',{'Stop','Video'},...
        'HorizontalAlignment','center');
    
	% Create panel for registration buttons.
    regpnl = uipanel(fig,'Position',[1000 335 200 260]);
	% Run registerPoint function on button click for point 1.
    regbtn1 = uibutton(regpnl,...
        'ButtonPushedFcn',@(regbtn1,event) registerPoint(SerialPort,1),...
        'Position',[10 195 60 60],...
        'FontSize',14,...
        'Text',{'Reg 1'},...
        'HorizontalAlignment','center');
	% Run registerPoint function on button click for point 2.
    regbtn2 = uibutton(regpnl,...
        'ButtonPushedFcn',@(regbtn2,event) registerPoint(SerialPort,2),...
        'Position',[10 130 60 60],...
        'FontSize',14,...
        'Text',{'Reg 2'},...
        'HorizontalAlignment','center');
	% Run registerPoint function on button click for point 3.
    regbtn3 = uibutton(regpnl,...
        'ButtonPushedFcn',@(regbtn3,event) registerPoint(SerialPort,3),...
        'Position',[10 65 60 60],...
        'FontSize',14,...
        'Text',{'Reg 3'},...
        'HorizontalAlignment','center');
	% Create a sub-panels to hold the registered coordinates.
	% These are continually updated in a loop below.
    coord1pnl = uipanel(regpnl,'Position',[80 195 110 60]);
    x1lab = uilabel(coord1pnl,'Position',[5 30 30 30],...
        'Text','X1:','FontSize',14,'FontWeight','bold');
    x1coord = uilabel(coord1pnl,'Position',[45 30 60 30],...
        'Text','---','FontSize',14,'FontWeight','bold');
    y1lab = uilabel(coord1pnl,'Position',[5 0 30 30],...
        'Text','Y1:','FontSize',14,'FontWeight','bold');
    y1coord = uilabel(coord1pnl,'Position',[45 0 60 30],...
        'Text','---','FontSize',14,'FontWeight','bold');
    coord2pnl = uipanel(regpnl,'Position',[80 130 110 60]);
    x2lab = uilabel(coord2pnl,'Position',[5 30 30 30],...
        'Text','X2:','FontSize',14,'FontWeight','bold');
    x2coord = uilabel(coord2pnl,'Position',[45 30 60 30],...
        'Text','---','FontSize',14,'FontWeight','bold');
    y2lab = uilabel(coord2pnl,'Position',[5 0 30 30],...
        'Text','Y2:','FontSize',14,'FontWeight','bold');
    y2coord = uilabel(coord2pnl,'Position',[45 0 60 30],...
        'Text','---','FontSize',14,'FontWeight','bold');
    coord3pnl = uipanel(regpnl,'Position',[80 65 110 60]);
    x3lab = uilabel(coord3pnl,'Position',[5 30 30 30],...
        'Text','X3:','FontSize',14,'FontWeight','bold');
    x3coord = uilabel(coord3pnl,'Position',[45 30 60 30],...
        'Text','---','FontSize',14,'FontWeight','bold');
    y3lab = uilabel(coord3pnl,'Position',[5 0 30 30],...
        'Text','Y3:','FontSize',14,'FontWeight','bold');
    y3coord = uilabel(coord3pnl,'Position',[45 0 60 30],...
        'Text','---','FontSize',14,'FontWeight','bold');
	% Submits registered points and closes applet.
    submitbtn = uibutton(regpnl,...
        'ButtonPushedFcn',@(submitbtn,event) submitpoints,...
        'Position',[10 5 180 55],...
        'FontSize',14,...
        'Text',{'Submit','points'},...
        'HorizontalAlignment','center');
    
	% Create panel for jog controlls.
    jogpnl = uipanel(fig,'Position',[1000  90 200 240]);
	% Make list of increments at which stage can move. Starts unselected.
    inc_list = uilistbox(jogpnl,...
        'Items', {'0.1','1.0','10','100'},...
        'Position',[130 5 60 90],...
        'FontSize',16,...
        'Value',{});
    inc_label = uilabel(jogpnl,...
        'HorizontalAlignment','right',...
        'Position',  [10 25 110 60],...
        'FontSize', 16,...
        'Text',{'Jog Increment','(mm)'});
	% Make button for movement in x+ direction
    xP = uibutton(jogpnl,'push',...
        'ButtonPushedFcn',@(xP,event) xpbtn(SerialPort,inc_list.Value),...
        'Text', 'X+',...
        'FontSize',18,...
        'FontWeight','bold',...
        'Position',[135 140 60 60]);
	% Make button for movement in x- direction
    xM = uibutton(jogpnl,'push',...
        'ButtonPushedFcn',@(xN,event) xmbtn(SerialPort,inc_list.Value),...
        'Text', 'X-',...
        'FontSize',18,...
        'FontWeight','bold',...
        'Position',[5 140 60 60]);
	% Make button for movement in y+ direction
    yP = uibutton(jogpnl,'push',...
        'ButtonPushedFcn',@(yP,event) ypbtn(SerialPort,inc_list.Value),...
        'Text', 'Y+',...
        'FontSize',18,...
        'FontWeight','bold',...
        'Position',[70 175 60 60]);
	% Make button for movement in y- direction
    yM = uibutton(jogpnl,'push',...
        'ButtonPushedFcn',@(yM,event) ymbtn(SerialPort,inc_list.Value),...
        'Text', 'Y-',...
        'FontSize',18,...
        'FontWeight','bold',...
        'Position',[70 105 60 60]);
    
	% Create panel for alarm status and reset.
    alarmpnl = uipanel(fig,'Position',[1000 20 200 65]);
    alarmlabel = uilabel(alarmpnl,...
        'Text','Alarm:',...
        'HorizontalAlignment','right',...
        'VerticalAlignment','center',...
        'FontSize',16,...
        'FontWeight','Bold',...
        'Position',[10 15 60 35]);
    alarmlight = uilamp(alarmpnl,...
        'Color',[1 1 1],...
        'Position',[alarmlabel.Position(1)+alarmlabel.Position(3)+5,...
        alarmlabel.Position(2), alarmlabel.Position(4),...
        alarmlabel.Position(4)]);
    alarmresetbtn = uibutton(alarmpnl,...
        'ButtonPushedFcn',@(alarmresetbtn,event) unlockcontroller(SerialPort),...
        'Text','Re-home',...
        'Position',[alarmlight.Position(1)+alarmlight.Position(3)+15,...
        alarmlight.Position(2),...
        alarmpnl.Position(3)-alarmlight.Position(3)-alarmlight.Position(1)-25,...
        alarmlight.Position(4)]);
    
	% Force all elements defined above to be drawn
    drawnow
    
	% Loop to continually update whether points have been submitted, check
	% alarm status, and update any registered points.
    global pointsgood
    pointsgood = false;
    while ~pointsgood
        if check4Alarm(SerialPort)
            alarmlight.Color = [1 0 0];
        else
            alarmlight.Color = [1 1 1];
        end
        if ~isnan(temp_points(1,1))
            x1coord.Text = num2str(temp_points(1,1));
            y1coord.Text = num2str(temp_points(1,2));
        end
        if ~isnan(temp_points(2,1))
            x2coord.Text = num2str(temp_points(2,1));
            y2coord.Text = num2str(temp_points(2,2));
        end
        if ~isnan(temp_points(3,1))
            x3coord.Text = num2str(temp_points(3,1));
            y3coord.Text = num2str(temp_points(3,2));
        end
        reg_points = temp_points;
        pause(0.1)
    end
    
    if pointsgood
        closepreview;
        closereq;
    end
end
